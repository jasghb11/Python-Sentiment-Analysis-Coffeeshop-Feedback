#Importing the basics
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use('ggplot')

import nltk

#reading out the data from our csv file, you can use your own data or the example file given.

df = pd.read_csv(r'C:\Users\YourUser\Documents\coffeesentiment1.csv')
print(df.shape)

#quickly reading out the scores, if your file is exceptionally large you can just read the head of the dataframe

pd.set_option('display.max_rows', None)
print(df)

#creating a table to show the reviews sorted by number and star rating

ax = df['Score'].value_counts().sort_index() \
    .plot(kind='bar',
          title='Count of Reviews by Stars',
          figsize=(15, 10))
ax.set_xlabel('Review Stars')
plt.show()

# basic NLTK use just to show NLTK out of the box
example = df['Text'][13]
example2 = df['Text'][3]
print(example)
print(example2)

tokens = nltk.word_tokenize(example)
tokens2 = nltk.word_tokenize(example2)
tokens[:10]

tagged = nltk.pos_tag(tokens)
tagged[:10]

# the following are all examples of NLTK out of the box and showing how it can be confused by some text, such as sarcasm.

from nltk.sentiment import SentimentIntensityAnalyzer
from tqdm.notebook import tqdm

sia = SentimentIntensityAnalyzer()

sia.polarity_scores('This was great')
sia.polarity_scores('No vegan options, nice')

#creating a table showing the results from the vaders model for sentiment analysis

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row['Text']
    ID = row['ID']
    res[ID] = sia.polarity_scores(text)

vaders = pd.DataFrame(res).T
vaders = vaders.reset_index().rename(columns={'index': 'ID'})
vaders = vaders.merge(df, how='left')

vaders.head()
print(vaders)

#creating a bar plot showing correlation between sentiment and score ratings
ax = sns.barplot(data=vaders, x='Score', y='compound')
ax.set_title('Compound Score by Star')
plt.show()

#additional plots showing positive, negative, and neutral correlation
fig, axs = plt.subplots(1, 3, figsize=(12, 3))
sns.barplot(data=vaders, x='Score', y='pos', ax=axs[0])
sns.barplot(data=vaders, x='Score', y='neu', ax=axs[1])
sns.barplot(data=vaders, x='Score', y='neg', ax=axs[2])
axs[0].set_title('Positive')
axs[1].set_title('Neutral')
axs[2].set_title('Negative')
plt.tight_layout()
plt.show()

#introducing the roberta model and testing it out
from transformers import AutoTokenizer
from transformers import AutoModelForSequenceClassification
from scipy.special import softmax

MODEL = f"cardiffnlp/twitter-roberta-base-sentiment"
tokenizer = AutoTokenizer.from_pretrained(MODEL)
model = AutoModelForSequenceClassification.from_pretrained(MODEL)
print(example)
sia.polarity_scores(example)

encoded_text = tokenizer(example, return_tensors='pt')
output = model(**encoded_text)
scores = output[0][0].detach().numpy()
scores = softmax(scores)
scores_dict = {
    'roberta_neg' : scores[0],
    'roberta_neu' : scores[1],
    'roberta_pos' : scores[2]
}
print(scores_dict)

#creating data visualization plots to show the differences and correlations between vader and roberta results

def polarity_scores_roberta(example):
    encoded_text = tokenizer(example, return_tensors='pt')
    output = model(**encoded_text)
    scores = output[0][0].detach().numpy()
    scores = softmax(scores)
    scores_dict = {
        'roberta_neg' : scores[0],
        'roberta_neu' : scores[1],
        'roberta_pos' : scores[2]
    }
    return scores_dict

res = {}
for i, row in tqdm(df.iterrows(), total=len(df)):
    try:
        text = row['Text']
        ID = row['ID']
        vader_result = sia.polarity_scores(text)
        vader_result_rename = {}
        for key, value in vader_result.items():
            vader_result_rename[f"vader_{key}"] = value
        roberta_result = polarity_scores_roberta(text)
        both = {**vader_result_rename, **roberta_result}
        res[ID] = both
    except RuntimeError:
        print(f'Broke for ID {ID}')

results_df = pd.DataFrame(res).T
results_df = results_df.reset_index().rename(columns={'index': 'ID'})
results_df = results_df.merge(df, how='left')
results_df.columns
sns.pairplot(data=results_df,
             vars=['vader_neg', 'vader_neu', 'vader_pos', 'roberta_neg', 'roberta_neu', 'roberta_pos'],
             hue='Score',
             palette='tab10')
plt.show()

#final code showing the differences between vaders and roberta results in positive sentiment for 1 star and negative sentiment
#for 5 star reviews

results_df.query('Score == 1') \
    .sort_values('roberta_pos', ascending=False)['Text'].values[0]

results_df.query('Score == 1') \
    .sort_values('vader_pos', ascending=False)['Text'].values[0]

results_df.query('Score == 5') \
    .sort_values('roberta_neg', ascending=False)['Text'].values[0]

results_df.query('Score == 5') \
    .sort_values('vader_neg', ascending=False)['Text'].values[0]
